0x000:                      | .pos 0
0x000: 30f40002000000000000 | irmovq stack, %rsp
0x00a: 807f00000000000000   | call main
0x013: 00                   | halt
                            | 
                            | # Setup linked list elements
0x018:                      | .align 8 
0x018:                      | ele1: 
0x018: 0a00000000000000     |     .quad 0x00a 
0x020: 2800000000000000     |     .quad ele2 
0x028:                      | ele2: 
0x028: b000000000000000     |     .quad 0x0b0 
0x030: 3800000000000000     |     .quad ele3 
0x038:                      | ele3: 
0x038: 000c000000000000     |     .quad 0xc00 
0x040: 0000000000000000     |     .quad 0
                            | 
                            | # long sum_list(list_ptr ls)
                            | # ls in %rdi
0x048:                      | sum_list:
0x048: 30f00000000000000000 |     irmovq $0, %rax # Init val
0x052: 707300000000000000   |     jmp test    # Goto test
                            | 
0x05b:                      | loop:
0x05b: 50870000000000000000 |     mrmovq (%rdi), %r8  # Get ls->val
0x065: 6080                 |     addq %r8, %rax  # Add ls->val to val
0x067: 50870800000000000000 |     mrmovq 8(%rdi), %r8 # Get ls->next
0x071: 2087                 |     rrmovq %r8, %rdi    # Set ls to ls->next
                            | 
0x073:                      | test:
0x073: 6277                 |     andq %rdi, %rdi # Set CC
0x075: 745b00000000000000   |     jne loop    # Loop test
0x07e: 90                   |     ret # return
                            | 
0x07f:                      | main:
0x07f: 30f71800000000000000 |     irmovq ele1, %rdi
0x089: 804800000000000000   |     call sum_list
0x092: 90                   |     ret
                            | 
                            | # Setup stack
0x200:                      | .pos 0x200
0x200:                      | stack:
