                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f44004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f69803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f76803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Jay
                            | # Describe how and why you modified the baseline code.
                            | # use iaddq instruction
                            | # make first jump to Loop to avoid mispredicted in most situations
                            | # unroll loop
                            | # pair read/write to avoid load/use hazard
                            | # unroll rest elements
                            | # adjust compare order at first entry
                            | # replace variable step with iaddq instruction
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 
0x032: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# if len < 4
0x03c: 72ae02000000000000   | 	jl RestElements		# goto RestElements:
                            | 
0x045: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# if len < 4 + 4
0x04f: 72c701000000000000   | 	jl UnrolledLoop4Init # goto UnrolledLoop4Init
                            | 
0x058:                      | UnrolledLoop8:
                            | 	# 1 2
0x058: 50a70000000000000000 | 	mrmovq 0(%rdi), %r10	# read val from src...
0x062: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x06c: 40a60000000000000000 | 	rmmovq %r10, 0(%rsi)	# ...and store it to dst
0x076: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x080: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x082: 719500000000000000   | 	jle Npos1		# if so, goto Npos:
0x08b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x095:                      | Npos1:	
                            | 	
0x095: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x097: 71aa00000000000000   | 	jle Npos2		# if so, goto Npos:
0x0a0: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0aa:                      | Npos2:	
                            | 
                            | 	# 3 4
0x0aa: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x0b4: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x0be: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0c8: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x0d2: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 
0x0d4: 71e700000000000000   | 	jle Npos3		# if so, goto Npos:
0x0dd: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0e7:                      | Npos3:	
                            | 
0x0e7: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0e9: 71fc00000000000000   | 	jle Npos4		# if so, goto Npos:
0x0f2: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0fc:                      | Npos4:
                            | 
                            | 	# 5 6
0x0fc: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x106: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11	# read val from src...
0x110: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x11a: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)	# ...and store it to dst
                            | 
0x124: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x126: 713901000000000000   | 	jle Npos5		# if so, goto Npos:
0x12f: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x139:                      | Npos5:	
                            | 	
0x139: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x13b: 714e01000000000000   | 	jle Npos6		# if so, goto Npos:
0x144: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x14e:                      | Npos6:	
                            | 
                            | 	# 7 8
0x14e: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	# read val from src...
0x158: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11	# read val from src...
0x162: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store it to dst
0x16c: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)	# ...and store it to dst
0x176: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 
0x178: 718b01000000000000   | 	jle Npos7		# if so, goto Npos:
0x181: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x18b:                      | Npos7:	
                            | 
0x18b: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x18d: 71a001000000000000   | 	jle Npos8		# if so, goto Npos:
0x196: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1a0:                      | Npos8:	
                            | 
0x1a0: c0f74000000000000000 | 	iaddq $64, %rdi		# src += 8
0x1aa: c0f64000000000000000 | 	iaddq $64, %rsi		# dst += 8
                            | 
0x1b4:                      | UnrolledLoop8Test:
0x1b4: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# len -= step, then len >= 0?
0x1be: 755800000000000000   | 	jge UnrolledLoop8		# if so, goto UnrolledLoop8:
                            | 	
                            | 
0x1c7:                      | UnrolledLoop4Init:
                            | 	# step = 4
                            | 	# equal to: iaddq $8, %rdx; iaddq $-4, %rdx
0x1c7: c0f20400000000000000 | 	iaddq $4, %rdx		# len >= step ?
0x1d1: 75e301000000000000   | 	jge UnrolledLoop4	# if so, goto UnrolledLoop:
0x1da: 70ae02000000000000   | 	jmp RestElements		# goto LoopInit
                            | 
0x1e3:                      | UnrolledLoop4:
                            | 	# 1 2
0x1e3: 50a70000000000000000 | 	mrmovq 0(%rdi), %r10	# read val from src...
0x1ed: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x1f7: 40a60000000000000000 | 	rmmovq %r10, 0(%rsi)	# ...and store it to dst
0x201: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x20b: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x20d: 712002000000000000   | 	jle Npos9		# if so, goto Npos:
0x216: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x220:                      | Npos9:	
                            | 	
0x220: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x222: 713502000000000000   | 	jle Npos10		# if so, goto Npos:
0x22b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x235:                      | Npos10:	
                            | 
                            | 	# 3 4
0x235: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x23f: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x249: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x253: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x25d: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 
0x25f: 717202000000000000   | 	jle Npos11		# if so, goto Npos:
0x268: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x272:                      | Npos11:	
                            | 
0x272: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x274: 718702000000000000   | 	jle Npos12		# if so, goto Npos:
0x27d: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x287:                      | Npos12:
                            | 
0x287: c0f72000000000000000 | 	iaddq $32, %rdi		# src += 4
0x291: c0f62000000000000000 | 	iaddq $32, %rsi		# dst += 4
                            | 
0x29b:                      | UnrolledLoop4Test:
0x29b: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len >= step?, then len -=step
0x2a5: 75e301000000000000   | 	jge UnrolledLoop4	# if so, goto UnrolledLoop4:
                            | 	
                            | 
0x2ae:                      | RestElements:
                            | 	# equal to: iaddq $4, %rdx; iaddq $-1, %rdx
0x2ae: c0f20300000000000000 | 	iaddq $3, %rdx		# restore len
0x2b8: 75c202000000000000   | 	jge Element1			# if so, goto Element1:
0x2c1: 90                   | 	ret
                            | 
0x2c2:                      | Element1:
0x2c2: 50a70000000000000000 | 	mrmovq 0(%rdi), %r10	# read val from src...
0x2cc: 40a60000000000000000 | 	rmmovq %r10, 0(%rsi)	# ...and store it to dst
0x2d6: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 
0x2d8: 71eb02000000000000   | 	jle Npos13		# if so, goto Npos:
0x2e1: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2eb:                      | Npos13:
                            | 
0x2eb: c0f2ffffffffffffffff | 	iaddq $-1, %rdx			# len < 1 ?; --len
0x2f5: 75ff02000000000000   | 	jge Element2			# if so, goto Element2:
0x2fe: 90                   | 	ret
                            | 
0x2ff:                      | Element2:	
0x2ff: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x309: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x313: 62bb                 | 	andq %r11, %r11		# val <= 0?
                            | 
0x315: 712803000000000000   | 	jle Npos14		# if so, goto Npos:
0x31e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x328:                      | Npos14:
                            | 
0x328: c0f2ffffffffffffffff | 	iaddq $-1, %rdx			# len < 1 ?; --len
0x332: 753c03000000000000   | 	jge Element3			# if so, goto Element3:
0x33b: 90                   | 	ret
                            | 	
0x33c:                      | Element3:
0x33c: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x346: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x350: 62cc                 | 	andq %r12, %r12		# val <= 0?
                            | 
0x352: 716503000000000000   | 	jle Done		# if so, goto Done:
0x35b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x365:                      | Done:
0x365: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x366:                      | End:
                            | #/* $end ncopy-ys */
0x366:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x368:                      | 	.align 8
0x368:                      | src:
0x368: 0100000000000000     | 	.quad 1
0x370: 0200000000000000     | 	.quad 2
0x378: fdffffffffffffff     | 	.quad -3
0x380: fcffffffffffffff     | 	.quad -4
0x388: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x390:                      | 	.align 16
0x390:                      | Predest:
0x390: fadebc0000000000     | 	.quad 0xbcdefa
0x398:                      | dest:
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8:                      | Postdest:
0x3b8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x3c0:                      | .align 8
                            | # Run time stack
0x3c0: 0000000000000000     | 	.quad 0
0x3c8: 0000000000000000     | 	.quad 0
0x3d0: 0000000000000000     | 	.quad 0
0x3d8: 0000000000000000     | 	.quad 0
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
0x430: 0000000000000000     | 	.quad 0
0x438: 0000000000000000     | 	.quad 0
                            | 
0x440:                      | Stack:
