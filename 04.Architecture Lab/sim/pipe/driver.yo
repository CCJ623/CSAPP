                            | #######################################################################
                            | # Test for copying block of size 5;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4c805000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20500000000000000 | 	irmovq $5, %rdx		# src and dst have 5 elements
0x014: 30f61805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 806f03000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Jay
                            | # Describe how and why you modified the baseline code.
                            | # use iaddq instruction
                            | # make first jump to Loop to avoid mispredicted in most situations
                            | # unroll loop
                            | # pair read/write to avoid load/use hazard
                            | # unroll rest elements
                            | # adjust compare order at first entry
                            | # replace variable step with iaddq instruction
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 
0x03b: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# if len < 4
0x045: 72b702000000000000   | 	jl RestElements		# goto RestElements:
                            | 
0x04e: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# if len < 4 + 4
0x058: 72d001000000000000   | 	jl UnrolledLoop4Init # goto UnrolledLoop4Init
                            | 
0x061:                      | UnrolledLoop8:
                            | 	# 1 2
0x061: 50a70000000000000000 | 	mrmovq 0(%rdi), %r10	# read val from src...
0x06b: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x075: 40a60000000000000000 | 	rmmovq %r10, 0(%rsi)	# ...and store it to dst
0x07f: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x089: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x08b: 719e00000000000000   | 	jle Npos1		# if so, goto Npos:
0x094: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x09e:                      | Npos1:	
                            | 	
0x09e: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0a0: 71b300000000000000   | 	jle Npos2		# if so, goto Npos:
0x0a9: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0b3:                      | Npos2:	
                            | 
                            | 	# 3 4
0x0b3: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x0bd: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x0c7: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0d1: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x0db: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 
0x0dd: 71f000000000000000   | 	jle Npos3		# if so, goto Npos:
0x0e6: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0f0:                      | Npos3:	
                            | 
0x0f0: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0f2: 710501000000000000   | 	jle Npos4		# if so, goto Npos:
0x0fb: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x105:                      | Npos4:
                            | 
                            | 	# 5 6
0x105: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x10f: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11	# read val from src...
0x119: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x123: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)	# ...and store it to dst
                            | 
0x12d: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x12f: 714201000000000000   | 	jle Npos5		# if so, goto Npos:
0x138: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x142:                      | Npos5:	
                            | 	
0x142: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x144: 715701000000000000   | 	jle Npos6		# if so, goto Npos:
0x14d: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x157:                      | Npos6:	
                            | 
                            | 	# 7 8
0x157: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	# read val from src...
0x161: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11	# read val from src...
0x16b: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store it to dst
0x175: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)	# ...and store it to dst
0x17f: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 
0x181: 719401000000000000   | 	jle Npos7		# if so, goto Npos:
0x18a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x194:                      | Npos7:	
                            | 
0x194: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x196: 71a901000000000000   | 	jle Npos8		# if so, goto Npos:
0x19f: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1a9:                      | Npos8:	
                            | 
0x1a9: c0f74000000000000000 | 	iaddq $64, %rdi		# src += 8
0x1b3: c0f64000000000000000 | 	iaddq $64, %rsi		# dst += 8
                            | 
0x1bd:                      | UnrolledLoop8Test:
0x1bd: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# len -= step, then len >= 0?
0x1c7: 756100000000000000   | 	jge UnrolledLoop8		# if so, goto UnrolledLoop8:
                            | 	
                            | 
0x1d0:                      | UnrolledLoop4Init:
                            | 	# step = 4
                            | 	# equal to: iaddq $8, %rdx; iaddq $-4, %rdx
0x1d0: c0f20400000000000000 | 	iaddq $4, %rdx		# len >= step ?
0x1da: 75ec01000000000000   | 	jge UnrolledLoop4	# if so, goto UnrolledLoop:
0x1e3: 70b702000000000000   | 	jmp RestElements		# goto LoopInit
                            | 
0x1ec:                      | UnrolledLoop4:
                            | 	# 1 2
0x1ec: 50a70000000000000000 | 	mrmovq 0(%rdi), %r10	# read val from src...
0x1f6: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x200: 40a60000000000000000 | 	rmmovq %r10, 0(%rsi)	# ...and store it to dst
0x20a: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x214: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x216: 712902000000000000   | 	jle Npos9		# if so, goto Npos:
0x21f: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x229:                      | Npos9:	
                            | 	
0x229: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x22b: 713e02000000000000   | 	jle Npos10		# if so, goto Npos:
0x234: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x23e:                      | Npos10:	
                            | 
                            | 	# 3 4
0x23e: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x248: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x252: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x25c: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x266: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 
0x268: 717b02000000000000   | 	jle Npos11		# if so, goto Npos:
0x271: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x27b:                      | Npos11:	
                            | 
0x27b: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x27d: 719002000000000000   | 	jle Npos12		# if so, goto Npos:
0x286: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x290:                      | Npos12:
                            | 
0x290: c0f72000000000000000 | 	iaddq $32, %rdi		# src += 4
0x29a: c0f62000000000000000 | 	iaddq $32, %rsi		# dst += 4
                            | 
0x2a4:                      | UnrolledLoop4Test:
0x2a4: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len >= step?, then len -=step
0x2ae: 75ec01000000000000   | 	jge UnrolledLoop4	# if so, goto UnrolledLoop4:
                            | 	
                            | 
0x2b7:                      | RestElements:
                            | 	# equal to: iaddq $4, %rdx; iaddq $-1, %rdx
0x2b7: c0f20300000000000000 | 	iaddq $3, %rdx		# restore len
0x2c1: 75cb02000000000000   | 	jge Element1			# if so, goto Element1:
0x2ca: 90                   | 	ret
                            | 
0x2cb:                      | Element1:
0x2cb: 50a70000000000000000 | 	mrmovq 0(%rdi), %r10	# read val from src...
0x2d5: 40a60000000000000000 | 	rmmovq %r10, 0(%rsi)	# ...and store it to dst
0x2df: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 
0x2e1: 71f402000000000000   | 	jle Npos13		# if so, goto Npos:
0x2ea: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2f4:                      | Npos13:
                            | 
0x2f4: c0f2ffffffffffffffff | 	iaddq $-1, %rdx			# len < 1 ?; --len
0x2fe: 750803000000000000   | 	jge Element2			# if so, goto Element2:
0x307: 90                   | 	ret
                            | 
0x308:                      | Element2:	
0x308: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x312: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x31c: 62bb                 | 	andq %r11, %r11		# val <= 0?
                            | 
0x31e: 713103000000000000   | 	jle Npos14		# if so, goto Npos:
0x327: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x331:                      | Npos14:
                            | 
0x331: c0f2ffffffffffffffff | 	iaddq $-1, %rdx			# len < 1 ?; --len
0x33b: 754503000000000000   | 	jge Element3			# if so, goto Element3:
0x344: 90                   | 	ret
                            | 	
0x345:                      | Element3:
0x345: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x34f: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x359: 62cc                 | 	andq %r12, %r12		# val <= 0?
                            | 
0x35b: 716e03000000000000   | 	jle Done		# if so, goto Done:
0x364: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x36e:                      | Done:
0x36e: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x36f:                      | End:
                            | #/* $end ncopy-ys */
0x36f:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 5.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x36f:                      | check:
                            | 	# Return value test
0x36f: 30fa0500000000000000 | 	irmovq $5,%r10
0x379: 61a0                 | 	subq %r10,%rax
0x37b: 739703000000000000   | 	je checkb
0x384: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x38e: 70d504000000000000   | 	jmp cdone
0x397:                      | checkb:
                            | 	# Code length check
0x397: 30f06f03000000000000 | 	irmovq EndFun,%rax
0x3a1: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x3ab: 6120                 | 	subq %rdx,%rax
0x3ad: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x3b7: 6102                 | 	subq %rax,%rdx
0x3b9: 75d503000000000000   | 	jge checkm
0x3c2: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x3cc: 70d504000000000000   | 	jmp cdone
0x3d5:                      | checkm:
0x3d5: 30f21805000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x3df: 30f3d804000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x3e9: 30f70500000000000000 | 	irmovq $5,%rdi  # Count
0x3f3: 6277                 | 	andq %rdi,%rdi
0x3f5: 735304000000000000   | 	je checkpre         # Skip check if count = 0
0x3fe:                      | mcloop:
0x3fe: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x408: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x412: 6160                 | 	subq %rsi,%rax
0x414: 733004000000000000   | 	je  mok
0x41d: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x427: 70d504000000000000   | 	jmp cdone
0x430:                      | mok:
0x430: 30f00800000000000000 | 	irmovq $8,%rax
0x43a: 6002                 | 	addq %rax,%rdx	  # dest ++
0x43c: 6003                 | 	addq %rax,%rbx    # src++
0x43e: 30f00100000000000000 | 	irmovq $1,%rax
0x448: 6107                 | 	subq %rax,%rdi    # cnt--
0x44a: 76fe03000000000000   | 	jg mcloop
0x453:                      | checkpre:
                            | 	# Check for corruption
0x453: 30f21005000000000000 | 	irmovq Predest,%rdx
0x45d: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x467: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x471: 6120                 | 	subq %rdx,%rax
0x473: 738f04000000000000   | 	je checkpost
0x47c: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x486: 70d504000000000000   | 	jmp cdone
0x48f:                      | checkpost:
                            | 	# Check for corruption
0x48f: 30f24005000000000000 | 	irmovq Postdest,%rdx
0x499: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x4a3: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x4ad: 6120                 | 	subq %rdx,%rax
0x4af: 73cb04000000000000   | 	je checkok
0x4b8: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x4c2: 70d504000000000000   | 	jmp cdone
0x4cb:                      | checkok:
                            | 	# Successful checks
0x4cb: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x4d5:                      | cdone:
0x4d5: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x4d8:                      | 	.align 8
0x4d8:                      | src:
0x4d8: 0100000000000000     | 	.quad 1
0x4e0: 0200000000000000     | 	.quad 2
0x4e8: 0300000000000000     | 	.quad 3
0x4f0: 0400000000000000     | 	.quad 4
0x4f8: 0500000000000000     | 	.quad 5
0x500: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x510:                      | 	.align 16
0x510:                      | Predest:
0x510: fadebc0000000000     | 	.quad 0xbcdefa
0x518:                      | dest:
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540:                      | Postdest:
0x540: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x548:                      | .align 8
                            | # Run time stack
0x548: 0000000000000000     | 	.quad 0
0x550: 0000000000000000     | 	.quad 0
0x558: 0000000000000000     | 	.quad 0
0x560: 0000000000000000     | 	.quad 0
0x568: 0000000000000000     | 	.quad 0
0x570: 0000000000000000     | 	.quad 0
0x578: 0000000000000000     | 	.quad 0
0x580: 0000000000000000     | 	.quad 0
0x588: 0000000000000000     | 	.quad 0
0x590: 0000000000000000     | 	.quad 0
0x598: 0000000000000000     | 	.quad 0
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
                            | 
0x5c8:                      | Stack:
