#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Jay
# Describe how and why you modified the baseline code.
# use iaddq instruction
# make first jump to Loop to avoid mispredicted in most situations
# unroll loop
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	irmovq $1, %r8		# step1 = 1
	irmovq $8, %r9		# step2 = 8

UnrolledLoopInit:
	subq %r9, %rdx		# len >= step2 ?
	jge UnrolledLoop	# if so, goto UnrolledLoop:
	addq %r9, %rdx		# restore len
	jmp LoopInit		# goto LoopInit

UnrolledLoop:
	mrmovq 0(%rdi), %r10	# read val from src...
	rmmovq %r10, 0(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos1		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos1:	

	mrmovq 8(%rdi), %r10	# read val from src...
	rmmovq %r10, 8(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos2		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos2:	

	mrmovq 16(%rdi), %r10	# read val from src...
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos3		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos3:	

	mrmovq 24(%rdi), %r10	# read val from src...
	rmmovq %r10, 24(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos4		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos4:	

	mrmovq 32(%rdi), %r10	# read val from src...
	rmmovq %r10, 32(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos5		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos5:	

	mrmovq 40(%rdi), %r10	# read val from src...
	rmmovq %r10, 40(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos6		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos6:	

	mrmovq 48(%rdi), %r10	# read val from src...
	rmmovq %r10, 48(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos7		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos7:	

	mrmovq 56(%rdi), %r10	# read val from src...
	rmmovq %r10, 56(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos8		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos8:	

	iaddq $64, %rdi		# src += 8
	iaddq $64, %rsi		# dst += 8

UnrolledLoopTest:
	subq %r9, %rdx		# len -= step2, then len >= 0?
	jge UnrolledLoop		# if so, goto UnrolledLoop:
	addq %r9, %rdx		# restore len

LoopInit:
	subq %r8, %rdx		# len >= step1 ?
	jge Loop			# if so, goto Loop:
	jmp Done			# otherwise, goto Done:

Loop:	
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos:	
	
	iaddq $8, %rdi		# src++
	iaddq $8, %rsi		# dst++
	subq %r8, %rdx		# len -= step1, then len >= 0?
	jge Loop			# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
