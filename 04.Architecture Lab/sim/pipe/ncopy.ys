#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Jay
# Describe how and why you modified the baseline code.
# use iaddq instruction
# make first jump to Loop to avoid mispredicted in most situations
# unroll loop
# pair read/write to avoid load/use hazard
# unroll rest elements
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	
UnrolledLoop8Init:
	irmovq $8, %r8		# step = 8
	subq %r8, %rdx		# len >= step ?
	jge UnrolledLoop8	# if so, goto UnrolledLoop:
	addq %r8, %rdx		# restore len
	jmp UnrolledLoop4Init	# goto UnrolledLoop4

UnrolledLoop8:
	# 1 2
	mrmovq 0(%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	rmmovq %r10, 0(%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst

	andq %r10, %r10		# val <= 0?
	jle Npos1		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos1:	
	
	andq %r11, %r11		# val <= 0?
	jle Npos2		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos2:	

	# 3 4
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?

	jle Npos3		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos3:	

	andq %r11, %r11		# val <= 0?
	jle Npos4		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos4:

	# 5 6
	mrmovq 32(%rdi), %r10	# read val from src...
	mrmovq 40(%rdi), %r11	# read val from src...
	rmmovq %r10, 32(%rsi)	# ...and store it to dst
	rmmovq %r11, 40(%rsi)	# ...and store it to dst

	andq %r10, %r10		# val <= 0?
	jle Npos5		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos5:	
	
	andq %r11, %r11		# val <= 0?
	jle Npos6		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos6:	

	# 7 8
	mrmovq 48(%rdi), %r10	# read val from src...
	mrmovq 56(%rdi), %r11	# read val from src...
	rmmovq %r10, 48(%rsi)	# ...and store it to dst
	rmmovq %r11, 56(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?

	jle Npos7		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos7:	

	andq %r11, %r11		# val <= 0?
	jle Npos8		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos8:	

	iaddq $64, %rdi		# src += 8
	iaddq $64, %rsi		# dst += 8

UnrolledLoop8Test:
	subq %r8, %rdx		# len -= step, then len >= 0?
	jge UnrolledLoop8		# if so, goto UnrolledLoop8:
	addq %r8, %rdx		# restore len

UnrolledLoop4Init:
	irmovq $4, %r8		# step = 4
	subq %r8, %rdx		# len >= step ?
	jge UnrolledLoop4	# if so, goto UnrolledLoop:
	addq %r8, %rdx		# restore len
	jmp RestElements		# goto LoopInit

UnrolledLoop4:
	# 1 2
	mrmovq 0(%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	rmmovq %r10, 0(%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst

	andq %r10, %r10		# val <= 0?
	jle Npos9		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos9:	
	
	andq %r11, %r11		# val <= 0?
	jle Npos10		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos10:	

	# 3 4
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?

	jle Npos11		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos11:	

	andq %r11, %r11		# val <= 0?
	jle Npos12		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos12:

	iaddq $32, %rdi		# src += 4
	iaddq $32, %rsi		# dst += 4

UnrolledLoop4Test:
	subq %r8, %rdx		# len -= step, then len >= 0?
	jge UnrolledLoop4		# if so, goto UnrolledLoop4:
	addq %r8, %rdx		# restore len

RestElements:
	irmovq $1, %r8		# step = 1
	
	mrmovq 0(%rdi), %r10	# read val from src...
	subq %r8, %rdx			# len < 1 ?; --len
	jge Element1			# if so, goto Element1:
	ret

Element1:
	rmmovq %r10, 0(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?

	jle Npos13		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos13:	
	mrmovq 8(%rdi), %r11	# read val from src...
	subq %r8, %rdx			# len < 1 ?; --len
	jge Element2			# if so, goto Element2:
	ret

Element2:
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?

	jle Npos14		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos14:

	mrmovq 16(%rdi), %r12	# read val from src...
	subq %r8, %rdx			# len < 1 ?; --len
	jge Element3			# if so, goto Element3:
	ret
	
Element3:
	rmmovq %r12, 16(%rsi)	# ...and store it to dst
	andq %r12, %r12		# val <= 0?

	jle Done		# if so, goto Done:
	iaddq $1, %rax		# count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
