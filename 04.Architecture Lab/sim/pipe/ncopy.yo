                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Jay
                            | # Describe how and why you modified the baseline code.
                            | # use iaddq instruction
                            | # make first jump to Loop to avoid mispredicted in most situations
                            | # unroll loop
                            | # pair read/write to avoid load/use hazard
                            | # unroll rest elements
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x000: 6300                 | 	xorq %rax,%rax		# count = 0;
                            | 
0x002: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# if len < 4
0x00c: 728402000000000000   | 	jl RestElements		# goto RestElements:
                            | 
0x015: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# if len < 4 + 4
0x01f: 729901000000000000   | 	jl UnrolledLoop4Init # goto UnrolledLoop4Init
                            | 	
0x028:                      | UnrolledLoop8Init:
0x028: 30f80800000000000000 | 	irmovq $8, %r8		# step = 8
                            | 
0x032:                      | UnrolledLoop8:
                            | 	# 1 2
0x032: 50a70000000000000000 | 	mrmovq 0(%rdi), %r10	# read val from src...
0x03c: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x046: 40a60000000000000000 | 	rmmovq %r10, 0(%rsi)	# ...and store it to dst
0x050: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x05a: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x05c: 716f00000000000000   | 	jle Npos1		# if so, goto Npos:
0x065: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x06f:                      | Npos1:	
                            | 	
0x06f: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x071: 718400000000000000   | 	jle Npos2		# if so, goto Npos:
0x07a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x084:                      | Npos2:	
                            | 
                            | 	# 3 4
0x084: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x08e: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x098: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0a2: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x0ac: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 
0x0ae: 71c100000000000000   | 	jle Npos3		# if so, goto Npos:
0x0b7: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0c1:                      | Npos3:	
                            | 
0x0c1: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0c3: 71d600000000000000   | 	jle Npos4		# if so, goto Npos:
0x0cc: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0d6:                      | Npos4:
                            | 
                            | 	# 5 6
0x0d6: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x0e0: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11	# read val from src...
0x0ea: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x0f4: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)	# ...and store it to dst
                            | 
0x0fe: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x100: 711301000000000000   | 	jle Npos5		# if so, goto Npos:
0x109: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x113:                      | Npos5:	
                            | 	
0x113: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x115: 712801000000000000   | 	jle Npos6		# if so, goto Npos:
0x11e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x128:                      | Npos6:	
                            | 
                            | 	# 7 8
0x128: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	# read val from src...
0x132: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11	# read val from src...
0x13c: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store it to dst
0x146: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)	# ...and store it to dst
0x150: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 
0x152: 716501000000000000   | 	jle Npos7		# if so, goto Npos:
0x15b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x165:                      | Npos7:	
                            | 
0x165: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x167: 717a01000000000000   | 	jle Npos8		# if so, goto Npos:
0x170: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x17a:                      | Npos8:	
                            | 
0x17a: c0f74000000000000000 | 	iaddq $64, %rdi		# src += 8
0x184: c0f64000000000000000 | 	iaddq $64, %rsi		# dst += 8
                            | 
0x18e:                      | UnrolledLoop8Test:
0x18e: 6182                 | 	subq %r8, %rdx		# len -= step, then len >= 0?
0x190: 753200000000000000   | 	jge UnrolledLoop8		# if so, goto UnrolledLoop8:
                            | 	
                            | 
0x199:                      | UnrolledLoop4Init:
0x199: c0f20800000000000000 | 	iaddq $8, %rdx		# restore len
0x1a3: 30f80400000000000000 | 	irmovq $4, %r8		# step = 4
0x1ad: 6182                 | 	subq %r8, %rdx		# len >= step ?
0x1af: 75c101000000000000   | 	jge UnrolledLoop4	# if so, goto UnrolledLoop:
0x1b8: 708402000000000000   | 	jmp RestElements		# goto LoopInit
                            | 
0x1c1:                      | UnrolledLoop4:
                            | 	# 1 2
0x1c1: 50a70000000000000000 | 	mrmovq 0(%rdi), %r10	# read val from src...
0x1cb: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x1d5: 40a60000000000000000 | 	rmmovq %r10, 0(%rsi)	# ...and store it to dst
0x1df: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x1e9: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1eb: 71fe01000000000000   | 	jle Npos9		# if so, goto Npos:
0x1f4: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1fe:                      | Npos9:	
                            | 	
0x1fe: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x200: 711302000000000000   | 	jle Npos10		# if so, goto Npos:
0x209: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x213:                      | Npos10:	
                            | 
                            | 	# 3 4
0x213: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x21d: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x227: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x231: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x23b: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 
0x23d: 715002000000000000   | 	jle Npos11		# if so, goto Npos:
0x246: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x250:                      | Npos11:	
                            | 
0x250: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x252: 716502000000000000   | 	jle Npos12		# if so, goto Npos:
0x25b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x265:                      | Npos12:
                            | 
0x265: c0f72000000000000000 | 	iaddq $32, %rdi		# src += 4
0x26f: c0f62000000000000000 | 	iaddq $32, %rsi		# dst += 4
                            | 
0x279:                      | UnrolledLoop4Test:
0x279: 6182                 | 	subq %r8, %rdx		# len -= step, then len >= 0?
0x27b: 75c101000000000000   | 	jge UnrolledLoop4		# if so, goto UnrolledLoop4:
                            | 	
                            | 
0x284:                      | RestElements:
0x284: c0f20400000000000000 | 	iaddq $4, %rdx		# restore len
0x28e: 30f80100000000000000 | 	irmovq $1, %r8		# step = 1
                            | 	
0x298: 50a70000000000000000 | 	mrmovq 0(%rdi), %r10	# read val from src...
0x2a2: 6182                 | 	subq %r8, %rdx			# len < 1 ?; --len
0x2a4: 75ae02000000000000   | 	jge Element1			# if so, goto Element1:
0x2ad: 90                   | 	ret
                            | 
0x2ae:                      | Element1:
0x2ae: 40a60000000000000000 | 	rmmovq %r10, 0(%rsi)	# ...and store it to dst
0x2b8: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 
0x2ba: 71cd02000000000000   | 	jle Npos13		# if so, goto Npos:
0x2c3: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2cd:                      | Npos13:	
0x2cd: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x2d7: 6182                 | 	subq %r8, %rdx			# len < 1 ?; --len
0x2d9: 75e302000000000000   | 	jge Element2			# if so, goto Element2:
0x2e2: 90                   | 	ret
                            | 
0x2e3:                      | Element2:
0x2e3: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x2ed: 62bb                 | 	andq %r11, %r11		# val <= 0?
                            | 
0x2ef: 710203000000000000   | 	jle Npos14		# if so, goto Npos:
0x2f8: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x302:                      | Npos14:
                            | 
0x302: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x30c: 6182                 | 	subq %r8, %rdx			# len < 1 ?; --len
0x30e: 751803000000000000   | 	jge Element3			# if so, goto Element3:
0x317: 90                   | 	ret
                            | 	
0x318:                      | Element3:
0x318: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x322: 62cc                 | 	andq %r12, %r12		# val <= 0?
                            | 
0x324: 713703000000000000   | 	jle Done		# if so, goto Done:
0x32d: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x337:                      | Done:
0x337: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x338:                      | End:
                            | #/* $end ncopy-ys */
