#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Jay
# Describe how and why you modified the baseline code.
# use iaddq instruction
# make first jump to Loop to avoid mispredicted in most situations
# unroll loop
# pair read/write to avoid load/use hazard
# unroll rest elements
# adjust compare order at first entry
# replace variable step with iaddq instruction
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header

	iaddq $-4, %rdx		# if len < 4
	jl RestElements		# goto RestElements:

	iaddq $-4, %rdx		# if len < 4 + 4
	jl UnrolledLoop4Init # goto UnrolledLoop4Init

UnrolledLoop8:
	# 1 2
	mrmovq 0(%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	rmmovq %r10, 0(%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst

	andq %r10, %r10		# val <= 0?
	jle Npos1		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos1:	
	
	andq %r11, %r11		# val <= 0?
	jle Npos2		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos2:	

	# 3 4
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?

	jle Npos3		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos3:	

	andq %r11, %r11		# val <= 0?
	jle Npos4		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos4:

	# 5 6
	mrmovq 32(%rdi), %r10	# read val from src...
	mrmovq 40(%rdi), %r11	# read val from src...
	rmmovq %r10, 32(%rsi)	# ...and store it to dst
	rmmovq %r11, 40(%rsi)	# ...and store it to dst

	andq %r10, %r10		# val <= 0?
	jle Npos5		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos5:	
	
	andq %r11, %r11		# val <= 0?
	jle Npos6		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos6:	

	# 7 8
	mrmovq 48(%rdi), %r10	# read val from src...
	mrmovq 56(%rdi), %r11	# read val from src...
	rmmovq %r10, 48(%rsi)	# ...and store it to dst
	rmmovq %r11, 56(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?

	jle Npos7		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos7:	

	andq %r11, %r11		# val <= 0?
	jle Npos8		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos8:	

	iaddq $64, %rdi		# src += 8
	iaddq $64, %rsi		# dst += 8

UnrolledLoop8Test:
	iaddq $-8, %rdx		# len -= step, then len >= 0?
	jge UnrolledLoop8		# if so, goto UnrolledLoop8:
	

UnrolledLoop4Init:
	# step = 4
	# equal to: iaddq $8, %rdx; iaddq $-4, %rdx
	iaddq $4, %rdx		# len >= step ?
	jge UnrolledLoop4	# if so, goto UnrolledLoop:
	jmp RestElements		# goto LoopInit

UnrolledLoop4:
	# 1 2
	mrmovq 0(%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	rmmovq %r10, 0(%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst

	andq %r10, %r10		# val <= 0?
	jle Npos9		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos9:	
	
	andq %r11, %r11		# val <= 0?
	jle Npos10		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos10:	

	# 3 4
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?

	jle Npos11		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos11:	

	andq %r11, %r11		# val <= 0?
	jle Npos12		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos12:

	iaddq $32, %rdi		# src += 4
	iaddq $32, %rsi		# dst += 4

UnrolledLoop4Test:
	iaddq $-4, %rdx		# len >= step?, then len -=step
	jge UnrolledLoop4	# if so, goto UnrolledLoop4:
	

RestElements:
	# equal to: iaddq $4, %rdx; iaddq $-1, %rdx
	iaddq $3, %rdx		# restore len
	jge Element1			# if so, goto Element1:
	ret

Element1:
	mrmovq 0(%rdi), %r10	# read val from src...
	rmmovq %r10, 0(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?

	jle Npos13		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos13:

	iaddq $-1, %rdx			# len < 1 ?; --len
	jge Element2			# if so, goto Element2:
	ret

Element2:	
	mrmovq 8(%rdi), %r11	# read val from src...
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	andq %r11, %r11		# val <= 0?

	jle Npos14		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos14:

	iaddq $-1, %rdx			# len < 1 ?; --len
	jge Element3			# if so, goto Element3:
	ret
	
Element3:
	mrmovq 16(%rdi), %r12	# read val from src...
	rmmovq %r12, 16(%rsi)	# ...and store it to dst
	andq %r12, %r12		# val <= 0?

	jle Done		# if so, goto Done:
	iaddq $1, %rax		# count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad 3
	.quad -4
	.quad -5
	.quad -6
	.quad -7
	.quad -8
	.quad 9
	.quad 10
	.quad 11
	.quad 12
	.quad -13
	.quad 14
	.quad -15
	.quad -16
	.quad 17
	.quad 18
	.quad 19
	.quad 20
	.quad -21
	.quad -22
	.quad 23
	.quad -24
	.quad -25
	.quad 26
	.quad -27
	.quad -28
	.quad -29
	.quad -30
	.quad 31
	.quad 32
	.quad 33
	.quad 34
	.quad -35
	.quad -36
	.quad 37
	.quad 38
	.quad 39
	.quad 40
	.quad 41
	.quad 42
	.quad -43
	.quad 44
	.quad -45
	.quad -46
	.quad 47
	.quad 48
	.quad -49
	.quad -50
	.quad -51
	.quad 52
	.quad 53
	.quad 54
	.quad 55
	.quad 56
	.quad -57
	.quad -58
	.quad -59
	.quad -60
	.quad -61
	.quad -62
	.quad -63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
