                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4b806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f63804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f72802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Jay
                            | # Describe how and why you modified the baseline code.
                            | # use iaddq instruction
                            | # make first jump to Loop to avoid mispredicted in most situations
                            | # unroll loop
                            | # pair read/write to avoid load/use hazard
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 30f80100000000000000 | 	irmovq $1, %r8		# step1 = 1
0x03e: 30f90800000000000000 | 	irmovq $8, %r9		# step2 = 8
                            | 
0x048:                      | UnrolledLoopInit:
0x048: 6192                 | 	subq %r9, %rdx		# len >= step2 ?
0x04a: 755e00000000000000   | 	jge UnrolledLoop	# if so, goto UnrolledLoop:
0x053: 6092                 | 	addq %r9, %rdx		# restore len
0x055: 70c701000000000000   | 	jmp LoopInit		# goto LoopInit
                            | 
0x05e:                      | UnrolledLoop:
                            | 	# 1 2
0x05e: 50a70000000000000000 | 	mrmovq 0(%rdi), %r10	# read val from src...
0x068: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x072: 40a60000000000000000 | 	rmmovq %r10, 0(%rsi)	# ...and store it to dst
0x07c: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
                            | 
0x086: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x088: 719b00000000000000   | 	jle Npos1		# if so, goto Npos:
0x091: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x09b:                      | Npos1:	
                            | 	
0x09b: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x09d: 71b000000000000000   | 	jle Npos2		# if so, goto Npos:
0x0a6: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0b0:                      | Npos2:	
                            | 
                            | 	# 3 4
0x0b0: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x0ba: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x0c4: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0ce: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x0d8: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 
0x0da: 71ed00000000000000   | 	jle Npos3		# if so, goto Npos:
0x0e3: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0ed:                      | Npos3:	
                            | 
0x0ed: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0ef: 710201000000000000   | 	jle Npos4		# if so, goto Npos:
0x0f8: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x102:                      | Npos4:
                            | 
                            | 	# 5 6
0x102: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x10c: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11	# read val from src...
0x116: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x120: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)	# ...and store it to dst
                            | 
0x12a: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x12c: 713f01000000000000   | 	jle Npos5		# if so, goto Npos:
0x135: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x13f:                      | Npos5:	
                            | 	
0x13f: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x141: 715401000000000000   | 	jle Npos6		# if so, goto Npos:
0x14a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x154:                      | Npos6:	
                            | 
                            | 	# 7 8
0x154: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	# read val from src...
0x15e: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11	# read val from src...
0x168: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store it to dst
0x172: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)	# ...and store it to dst
0x17c: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 
0x17e: 719101000000000000   | 	jle Npos7		# if so, goto Npos:
0x187: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x191:                      | Npos7:	
                            | 
0x191: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x193: 71a601000000000000   | 	jle Npos8		# if so, goto Npos:
0x19c: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1a6:                      | Npos8:	
                            | 
0x1a6: c0f74000000000000000 | 	iaddq $64, %rdi		# src += 8
0x1b0: c0f64000000000000000 | 	iaddq $64, %rsi		# dst += 8
                            | 
0x1ba:                      | UnrolledLoopTest:
0x1ba: 6192                 | 	subq %r9, %rdx		# len -= step2, then len >= 0?
0x1bc: 755e00000000000000   | 	jge UnrolledLoop		# if so, goto UnrolledLoop:
0x1c5: 6092                 | 	addq %r9, %rdx		# restore len
                            | 
0x1c7:                      | LoopInit:
0x1c7: 6182                 | 	subq %r8, %rdx		# len >= step1 ?
0x1c9: 75db01000000000000   | 	jge Loop			# if so, goto Loop:
0x1d2: 702302000000000000   | 	jmp Done			# otherwise, goto Done:
                            | 
0x1db:                      | Loop:	
0x1db: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x1e5: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x1ef: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1f1: 710402000000000000   | 	jle Npos		# if so, goto Npos:
0x1fa: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x204:                      | Npos:	
                            | 	
0x204: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x20e: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x218: 6182                 | 	subq %r8, %rdx		# len -= step1, then len >= 0?
0x21a: 75db01000000000000   | 	jge Loop			# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x223:                      | Done:
0x223: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x224:                      | End:
                            | #/* $end ncopy-ys */
0x224:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x228:                      | 	.align 8
0x228:                      | src:
0x228: ffffffffffffffff     | 	.quad -1
0x230: 0200000000000000     | 	.quad 2
0x238: fdffffffffffffff     | 	.quad -3
0x240: 0400000000000000     | 	.quad 4
0x248: 0500000000000000     | 	.quad 5
0x250: 0600000000000000     | 	.quad 6
0x258: 0700000000000000     | 	.quad 7
0x260: 0800000000000000     | 	.quad 8
0x268: 0900000000000000     | 	.quad 9
0x270: 0a00000000000000     | 	.quad 10
0x278: f5ffffffffffffff     | 	.quad -11
0x280: 0c00000000000000     | 	.quad 12
0x288: f3ffffffffffffff     | 	.quad -13
0x290: f2ffffffffffffff     | 	.quad -14
0x298: f1ffffffffffffff     | 	.quad -15
0x2a0: 1000000000000000     | 	.quad 16
0x2a8: efffffffffffffff     | 	.quad -17
0x2b0: 1200000000000000     | 	.quad 18
0x2b8: 1300000000000000     | 	.quad 19
0x2c0: ecffffffffffffff     | 	.quad -20
0x2c8: ebffffffffffffff     | 	.quad -21
0x2d0: eaffffffffffffff     | 	.quad -22
0x2d8: 1700000000000000     | 	.quad 23
0x2e0: 1800000000000000     | 	.quad 24
0x2e8: e7ffffffffffffff     | 	.quad -25
0x2f0: 1a00000000000000     | 	.quad 26
0x2f8: 1b00000000000000     | 	.quad 27
0x300: e4ffffffffffffff     | 	.quad -28
0x308: e3ffffffffffffff     | 	.quad -29
0x310: 1e00000000000000     | 	.quad 30
0x318: e1ffffffffffffff     | 	.quad -31
0x320: e0ffffffffffffff     | 	.quad -32
0x328: 2100000000000000     | 	.quad 33
0x330: 2200000000000000     | 	.quad 34
0x338: ddffffffffffffff     | 	.quad -35
0x340: 2400000000000000     | 	.quad 36
0x348: 2500000000000000     | 	.quad 37
0x350: daffffffffffffff     | 	.quad -38
0x358: d9ffffffffffffff     | 	.quad -39
0x360: 2800000000000000     | 	.quad 40
0x368: 2900000000000000     | 	.quad 41
0x370: d6ffffffffffffff     | 	.quad -42
0x378: 2b00000000000000     | 	.quad 43
0x380: d4ffffffffffffff     | 	.quad -44
0x388: d3ffffffffffffff     | 	.quad -45
0x390: d2ffffffffffffff     | 	.quad -46
0x398: d1ffffffffffffff     | 	.quad -47
0x3a0: 3000000000000000     | 	.quad 48
0x3a8: cfffffffffffffff     | 	.quad -49
0x3b0: 3200000000000000     | 	.quad 50
0x3b8: cdffffffffffffff     | 	.quad -51
0x3c0: 3400000000000000     | 	.quad 52
0x3c8: cbffffffffffffff     | 	.quad -53
0x3d0: caffffffffffffff     | 	.quad -54
0x3d8: 3700000000000000     | 	.quad 55
0x3e0: 3800000000000000     | 	.quad 56
0x3e8: 3900000000000000     | 	.quad 57
0x3f0: 3a00000000000000     | 	.quad 58
0x3f8: c5ffffffffffffff     | 	.quad -59
0x400: c4ffffffffffffff     | 	.quad -60
0x408: c3ffffffffffffff     | 	.quad -61
0x410: c2ffffffffffffff     | 	.quad -62
0x418: c1ffffffffffffff     | 	.quad -63
0x420: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x430:                      | 	.align 16
0x430:                      | Predest:
0x430: fadebc0000000000     | 	.quad 0xbcdefa
0x438:                      | dest:
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630:                      | Postdest:
0x630: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x638:                      | .align 8
                            | # Run time stack
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
0x678: 0000000000000000     | 	.quad 0
0x680: 0000000000000000     | 	.quad 0
0x688: 0000000000000000     | 	.quad 0
0x690: 0000000000000000     | 	.quad 0
0x698: 0000000000000000     | 	.quad 0
0x6a0: 0000000000000000     | 	.quad 0
0x6a8: 0000000000000000     | 	.quad 0
0x6b0: 0000000000000000     | 	.quad 0
                            | 
0x6b8:                      | Stack:
